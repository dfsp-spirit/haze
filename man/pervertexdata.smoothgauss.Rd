% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/smooth_gauss.R
\name{pervertexdata.smoothgauss}
\alias{pervertexdata.smoothgauss}
\title{Smooth per-vertex data based on a mesh using true Gaussian smoothing.}
\usage{
pervertexdata.smoothgauss(surface, data, fwhm, trunc_factor = 3.5)
}
\arguments{
\item{surface}{a mesh, represented as an \code{fs.surface} instance from the \code{freesurferformats} package or a \code{tmesh3d} instance from \code{rgl}, or a character string representing the path of a mesh to load with \code{freesurferformats::read.fs.surface}.}

\item{data}{numerical vector of per-vertex-data for the mesh, one value per vertex. Data values of \code{NA} will be ignored, allowing you to mask parts of the data.}

\item{fwhm}{scalar double smoothing kernel full width at half max}

\item{trunc_factor}{scalar double, truncation factor for Gaussian neighborhood, in Gaussian standard deviations.}
}
\value{
numerical vector, the smoothed data.
}
\description{
This function performs Gaussian smoothing of vertices in the geodesic neighborhood of all vertices. This is computationally quite expensive and requires large amounts of memory for large meshes.
}
\examples{
\dontrun{
mesh = rgl::tetrahedron3d();
pvd = rnorm(nrow(mes2$vb), mean = 5.0, sd = 1.0);
pvd_smoothed = pervertexdata.smoothgauss(mesh, pvd, fwhm=5.0);
}

}
\seealso{
\code{\link{pervertexdata.smoothnn}} can be used to approximate Gaussian smoothing with several iterations of nearest neighbor smoothing, and is a lot faster for large meshes.
}
